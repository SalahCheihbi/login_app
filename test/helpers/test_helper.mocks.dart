// Mocks generated by Mockito 5.4.2 from annotations
// in login_app/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:convert' as _i19;
import 'dart:typed_data' as _i20;

import 'package:dartz/dartz.dart' as _i2;
import 'package:http/http.dart' as _i6;
import 'package:login_app/core/error/failures.dart' as _i8;
import 'package:login_app/core/network/network_info.dart' as _i13;
import 'package:login_app/features/auth/data/datasources/login_local_data_source.dart'
    as _i14;
import 'package:login_app/features/auth/data/datasources/login_remote_data_source.dart'
    as _i10;
import 'package:login_app/features/auth/data/models/token_model.dart' as _i11;
import 'package:login_app/features/auth/domain/entities/token_entity.dart'
    as _i9;
import 'package:login_app/features/auth/domain/repository/login_repository.dart'
    as _i3;
import 'package:login_app/features/auth/domain/usecase/login_usecase.dart'
    as _i12;
import 'package:login_app/features/general/data/datasources/profile_local_data_source.dart'
    as _i16;
import 'package:login_app/features/general/data/datasources/profile_remote_data_source.dart'
    as _i17;
import 'package:login_app/features/general/data/models/profile_model.dart'
    as _i4;
import 'package:login_app/features/general/domain/entities/profile_entity.dart'
    as _i15;
import 'package:login_app/features/general/domain/repository/profile_repository.dart'
    as _i5;
import 'package:login_app/features/general/domain/usercase/get_profile.dart'
    as _i18;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLoginRepository_1 extends _i1.SmartFake
    implements _i3.LoginRepository {
  _FakeLoginRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUnit_2 extends _i1.SmartFake implements _i2.Unit {
  _FakeUnit_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProfileModel_3 extends _i1.SmartFake implements _i4.ProfileModel {
  _FakeProfileModel_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProfileRepository_4 extends _i1.SmartFake
    implements _i5.ProfileRepository {
  _FakeProfileRepository_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_5 extends _i1.SmartFake implements _i6.Response {
  _FakeResponse_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_6 extends _i1.SmartFake
    implements _i6.StreamedResponse {
  _FakeStreamedResponse_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LoginRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginRepository extends _i1.Mock implements _i3.LoginRepository {
  MockLoginRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i9.TokenEntity>>> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue:
            _i7.Future<_i2.Either<_i8.Failure, List<_i9.TokenEntity>>>.value(
                _FakeEither_0<_i8.Failure, List<_i9.TokenEntity>>(
          this,
          Invocation.method(
            #login,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i7.Future<_i2.Either<_i8.Failure, List<_i9.TokenEntity>>>);
}

/// A class which mocks [LoginRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginRemoteDataSource extends _i1.Mock
    implements _i10.LoginRemoteDataSource {
  MockLoginRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i11.TokenModel>> getLogin(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLogin,
          [
            email,
            password,
          ],
        ),
        returnValue:
            _i7.Future<List<_i11.TokenModel>>.value(<_i11.TokenModel>[]),
      ) as _i7.Future<List<_i11.TokenModel>>);
}

/// A class which mocks [LoginUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUseCase extends _i1.Mock implements _i12.LoginUseCase {
  MockLoginUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.LoginRepository get loginRepository => (super.noSuchMethod(
        Invocation.getter(#loginRepository),
        returnValue: _FakeLoginRepository_1(
          this,
          Invocation.getter(#loginRepository),
        ),
      ) as _i3.LoginRepository);
  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i9.TokenEntity>>> call(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            email,
            password,
          ],
        ),
        returnValue:
            _i7.Future<_i2.Either<_i8.Failure, List<_i9.TokenEntity>>>.value(
                _FakeEither_0<_i8.Failure, List<_i9.TokenEntity>>(
          this,
          Invocation.method(
            #call,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i7.Future<_i2.Either<_i8.Failure, List<_i9.TokenEntity>>>);
}

/// A class which mocks [NetWorkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetWorkInfo extends _i1.Mock implements _i13.NetWorkInfo {
  MockNetWorkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
}

/// A class which mocks [LoginLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginLocalDataSource extends _i1.Mock
    implements _i14.LoginLocalDataSource {
  MockLoginLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i11.TokenModel>> getCachedLogin() => (super.noSuchMethod(
        Invocation.method(
          #getCachedLogin,
          [],
        ),
        returnValue:
            _i7.Future<List<_i11.TokenModel>>.value(<_i11.TokenModel>[]),
      ) as _i7.Future<List<_i11.TokenModel>>);
  @override
  _i7.Future<_i2.Unit> cachedLogin(List<_i11.TokenModel>? loginModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #cachedLogin,
          [loginModel],
        ),
        returnValue: _i7.Future<_i2.Unit>.value(_FakeUnit_2(
          this,
          Invocation.method(
            #cachedLogin,
            [loginModel],
          ),
        )),
      ) as _i7.Future<_i2.Unit>);
}

/// A class which mocks [ProfileRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProfileRepository extends _i1.Mock implements _i5.ProfileRepository {
  MockProfileRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i8.Failure, _i15.ProfileEntity>> getProfile() =>
      (super.noSuchMethod(
        Invocation.method(
          #getProfile,
          [],
        ),
        returnValue:
            _i7.Future<_i2.Either<_i8.Failure, _i15.ProfileEntity>>.value(
                _FakeEither_0<_i8.Failure, _i15.ProfileEntity>(
          this,
          Invocation.method(
            #getProfile,
            [],
          ),
        )),
      ) as _i7.Future<_i2.Either<_i8.Failure, _i15.ProfileEntity>>);
}

/// A class which mocks [ProfileLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProfileLocalDataSource extends _i1.Mock
    implements _i16.ProfileLocalDataSource {
  MockProfileLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i4.ProfileModel> getCachedProfile() => (super.noSuchMethod(
        Invocation.method(
          #getCachedProfile,
          [],
        ),
        returnValue: _i7.Future<_i4.ProfileModel>.value(_FakeProfileModel_3(
          this,
          Invocation.method(
            #getCachedProfile,
            [],
          ),
        )),
      ) as _i7.Future<_i4.ProfileModel>);
  @override
  _i7.Future<_i2.Unit> cachedProfile(List<_i4.ProfileModel>? profileModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #cachedProfile,
          [profileModel],
        ),
        returnValue: _i7.Future<_i2.Unit>.value(_FakeUnit_2(
          this,
          Invocation.method(
            #cachedProfile,
            [profileModel],
          ),
        )),
      ) as _i7.Future<_i2.Unit>);
}

/// A class which mocks [ProfileRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProfileRemoteDataSource extends _i1.Mock
    implements _i17.ProfileRemoteDataSource {
  MockProfileRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i4.ProfileModel> getProfile() => (super.noSuchMethod(
        Invocation.method(
          #getProfile,
          [],
        ),
        returnValue: _i7.Future<_i4.ProfileModel>.value(_FakeProfileModel_3(
          this,
          Invocation.method(
            #getProfile,
            [],
          ),
        )),
      ) as _i7.Future<_i4.ProfileModel>);
}

/// A class which mocks [GetProfileUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProfileUseCase extends _i1.Mock implements _i18.GetProfileUseCase {
  MockGetProfileUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.ProfileRepository get profileRepository => (super.noSuchMethod(
        Invocation.getter(#profileRepository),
        returnValue: _FakeProfileRepository_4(
          this,
          Invocation.getter(#profileRepository),
        ),
      ) as _i5.ProfileRepository);
  @override
  _i7.Future<_i2.Either<_i8.Failure, _i15.ProfileEntity>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue:
            _i7.Future<_i2.Either<_i8.Failure, _i15.ProfileEntity>>.value(
                _FakeEither_0<_i8.Failure, _i15.ProfileEntity>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i7.Future<_i2.Either<_i8.Failure, _i15.ProfileEntity>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i6.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i6.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i6.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<_i6.Response>);
  @override
  _i7.Future<_i6.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i6.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<_i6.Response>);
  @override
  _i7.Future<_i6.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i19.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i6.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i6.Response>);
  @override
  _i7.Future<_i6.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i19.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i6.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i6.Response>);
  @override
  _i7.Future<_i6.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i19.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i6.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i6.Response>);
  @override
  _i7.Future<_i6.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i19.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i6.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i6.Response>);
  @override
  _i7.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<String>.value(''),
      ) as _i7.Future<String>);
  @override
  _i7.Future<_i20.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i20.Uint8List>.value(_i20.Uint8List(0)),
      ) as _i7.Future<_i20.Uint8List>);
  @override
  _i7.Future<_i6.StreamedResponse> send(_i6.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i7.Future<_i6.StreamedResponse>.value(_FakeStreamedResponse_6(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i7.Future<_i6.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
